
library(rstan)
library(shinystan)
library(loo)
library(bayesplot)
library(tidyverse)

estGammaParams <- function(mu, var) {
  alpha <- mu^2 / var 
  beta <-  mu  /  var
  return(params = list(alpha = alpha, beta = beta))
}



gasol = c(10,19,16,2,11,10,22);mean(gasol);var(gasol)
estGammaParams(12.85,44.80)

bgas ="data {
  int N;
  int y[N];
}parameters {
  real<lower=0> lambda;
}model {  
  lambda ~ gamma(3.6,0.28);
  y ~ poisson(lambda);
}
generated quantities {
 vector[N] log_lik;
  for (n in 1:N) {
  log_lik[n] = poisson_lpmf(y[N] | lambda);
}} "

# data as a list ALWAYS 
stan.dat <- list(N = length(gasol),y = gasol)

# fit the sampling model to HMC 
fit <- stan(model_code  = bgas,
            data        = stan.dat,
            iter        = 2000,
            warmup      = 500,
            chains      = 4,
            seed        = 12345,
            control     = list(adapt_delta=0.99))

# print posterior mean of lambda parameter 
print(fit,pars = "lambda")

traceplot(fit,pars = "lambda")
# extract log_lik from posterior samples 
log_lik_1 <- extract_log_lik(fit,
                             parameter_name = "log_lik",
                             merge_chains = FALSE)
r_eff1 <- relative_eff(exp(log_lik_1)) 
loo_1 <- loo(log_lik_1, r_eff = r_eff1, cores = 4)

print(loo_1)
plot(loo_1)

spain= c(101,73,73,67,81,90,71);mean(spain);var(spain)
estGammaParams(79.5,148)

bsp ="data {
  int N;
  int y[N];
}parameters {
  real<lower=0> lambda;
}model {  
  lambda ~ gamma(42.7,0.53);
  y ~ poisson(lambda);
}
generated quantities {
 vector[N] log_lik;
  for (n in 1:N) {
  log_lik[n] = poisson_lpmf(y[N] | lambda);
}} "

# data as a list ALWAYS 
stan.dat2 <- list(N = length(spain),y = spain)

# fit the sampling model to HMC 
fit2 <- stan(model_code  = bsp,
            data        = stan.dat2,
            iter        = 2000, 
            chains      = 4,
            seed        = 12345,
            control     = list(adapt_delta=0.99))

# print posterior mean of lambda parameter 
print(fit2,pars = "lambda")

stan_dens(fit2,pars = "lambda")
plot(fit2,pars = "lambda")
# extract log_lik from posterior samples 
log_lik_2 <- extract_log_lik(fit2,
                             parameter_name = "log_lik",
                             merge_chains = FALSE)
r_eff2 <- relative_eff(exp(log_lik_2)) 
loo_2 <- loo(log_lik_2, r_eff = r_eff2, cores = 4)

print(loo_2)
plot(loo_2)



scola = c(15,23,13,15,21,20,28);mean(scola);var(scola)
estGammaParams(19.2,28.2)

bsc ="data {
  int N;
  int y[N];
}parameters {
  real<lower=0> lambda;
}model {  
  lambda ~ gamma(13,0.68);
  y ~ poisson(lambda);
}
generated quantities {
 vector[N] log_lik;
  for (n in 1:N) {
  log_lik[n] = poisson_lpmf(y[N] | lambda);
}} "

# data as a list ALWAYS 
stan.dat3 <- list(N = length(scola),y = scola)

# fit the sampling model to HMC 
fit3 <- stan(model_code  = bsc,
             data        = stan.dat3,
             iter        = 2000, 
             chains      = 4,
             seed        = 12345,
             control     = list(adapt_delta=0.99))

# print posterior mean of lambda parameter 
print(fit3,pars = "lambda")

stan_hist(fit3,pars = "lambda")
log_lik_3 <- extract_log_lik(fit3,
                             parameter_name = "log_lik",
                             merge_chains = FALSE)
r_eff3 <- relative_eff(exp(log_lik_3)) 
loo_3 <- loo(log_lik_3, r_eff = r_eff3, cores = 4)

print(loo_3)
plot(loo_3)


argentina = c(95,94,69,87,91,97,80);mean(argentina);var(argentina)
estGammaParams(19.2,28.2)

bar ="data {
  int N;
  int y[N];
}parameters {
  real<lower=0> lambda;
}model {  
  lambda ~ gamma(13,0.68);
  y ~ poisson(lambda);
}
generated quantities {
 vector[N] log_lik;
  for (n in 1:N) {
  log_lik[n] = poisson_lpmf(y[N] | lambda);
}} "

# data as a list ALWAYS 
stan.dat4 <- list(N = length(argentina),y = argentina)

# fit the sampling model to HMC 
fit4 <- stan(model_code  = bar,
             data        = stan.dat4,
             iter        = 2000, 
             chains      = 4,
             seed        = 12345,
             control     = list(adapt_delta=0.99))

# print posterior mean of lambda parameter 
print(fit4,pars = "lambda")

log_lik_4 <- extract_log_lik(fit4,
                             parameter_name = "log_lik",
                             merge_chains = FALSE)
r_eff4 <- relative_eff(exp(log_lik_4)) 
loo_4 <- loo(log_lik_4, r_eff = r_eff4, cores = 4)

print(loo_4)
plot(loo_4)



comp1 = loo_compare(loo_1,loo_2)
comp1
comp2 = loo_compare(loo_3,loo_4)
comp2

# Facundo Campazzo
y1 = c(3,3,2,2,1,3,3)
n1 = c(4,8,7,3,4,6,9)
f1 = n1-y1
d1 = data.frame(y1,f1)
m1 = stan_glm(cbind(y1,f1)~1,
              binomial,
              data = d1, 
              prior_intercept = normal(0,1),
              iter = 2000,
              chains = 4,
              warmup = 500,
              seed = 12345,
              algorithm = "sampling")
plot(m1, plotfun = "areas", prob = 0.9,
     pars = "(Intercept)")
pp_check(m1)
summary(m1)
invlogit <- function (x) { (exp(x)) / (1+exp(x)) }
invlogit(coef(m1))
plot_title <- ggplot2::ggtitle("Posterior Distributions")
plot(m1, "hist", regex_pars = "(Intercept)") + plot_title

# Sergio Llull
y2 = c(4,0,1,1,3,0,4)
n2 = c(6,6,5,6,9,4,10)
f2 = n2-y2
d2 = data.frame(y2,f2)
m2 = stan_glm(cbind(y2,f2)~1,
              binomial,
              data = d2,
              prior_intercept = normal(0,1),
              iter = 2000,
              chains = 4,
              warmup = 500,
              seed = 12345,
              algorithm = "sampling")
summary(m2)
coef(m2)
invlogit(coef(m2))

plot(m2, plotfun = "areas", prob = 0.9,
     pars = "(Intercept)")
pp_check(m2)
# launch_shinystan(m2)




# or in Stan syntax for Campazzo for the whole tournament (and the final)
Binomial ="
data {
    int<lower=0> I;     // number of observations
    int<lower=0> y[I];  // number of successes
    int<lower=0> N[I];  // number of trials
   }
parameters {
    real alpha;        // intercept
}
model {
   alpha  ~ normal(0,1); //prior
   y ~ binomial_logit(I, alpha); // likelihood
} "
df <- list(I = 8,
           y = c(3,3,2,2,1,3,3,1),
           N = c(4,8,7,3,4,6,9,5))

fit <- stan(model_code = Binomial,
            data   = df, 
            iter   = 2000, 
            chains = 4,
            warmup = 500,
            thin   = 1,
            seed   = 123,
            control = list(adapt_delta=0.99))
print(fit)
invlogit(-0.89)

